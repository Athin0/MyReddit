// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import post "gitlab.com/mailru-go/lectures-2022-1/06_databases/99_hw/redditclone/pkg/post"
import user "gitlab.com/mailru-go/lectures-2022-1/06_databases/99_hw/redditclone/pkg/user"

// PostRepo is an autogenerated mock type for the PostRepo type
type PostRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *PostRepo) Add(_a0 *post.Post) (*post.Post, error) {
	ret := _m.Called(_a0)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(*post.Post) *post.Post); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*post.Post) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddComment provides a mock function with given fields: id, text, author
func (_m *PostRepo) AddComment(id string, text string, author *user.User) (*post.Post, error) {
	ret := _m.Called(id, text, author)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(string, string, *user.User) *post.Post); ok {
		r0 = rf(id, text, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *user.User) error); ok {
		r1 = rf(id, text, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *PostRepo) Delete(id string) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: idPost, idComment
func (_m *PostRepo) DeleteComment(idPost string, idComment int64) (*post.Post, error) {
	ret := _m.Called(idPost, idComment)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(string, int64) *post.Post); ok {
		r0 = rf(idPost, idComment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(idPost, idComment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: i
func (_m *PostRepo) Get(i string) (*post.Post, error) {
	ret := _m.Called(i)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(string) *post.Post); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *PostRepo) GetAll() ([]*post.Post, error) {
	ret := _m.Called()

	var r0 []*post.Post
	if rf, ok := ret.Get(0).(func() []*post.Post); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFromUser provides a mock function with given fields: userName
func (_m *PostRepo) GetFromUser(userName string) ([]*post.Post, error) {
	ret := _m.Called(userName)

	var r0 []*post.Post
	if rf, ok := ret.Get(0).(func(string) []*post.Post); ok {
		r0 = rf(userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInCategory provides a mock function with given fields: c
func (_m *PostRepo) GetInCategory(c string) ([]*post.Post, error) {
	ret := _m.Called(c)

	var r0 []*post.Post
	if rf, ok := ret.Get(0).(func(string) []*post.Post); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVote provides a mock function with given fields: vote, idPost, author
func (_m *PostRepo) UpdateVote(vote int, idPost string, author *user.User) (*post.Post, error) {
	ret := _m.Called(vote, idPost, author)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(int, string, *user.User) *post.Post); ok {
		r0 = rf(vote, idPost, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, *user.User) error); ok {
		r1 = rf(vote, idPost, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
