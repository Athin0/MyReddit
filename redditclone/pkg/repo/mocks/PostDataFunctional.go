// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"
	"gitlab.com/mailru-go/lectures-2022-1/06_databases/99_hw/redditclone/pkg/post"
)
import mock "github.com/stretchr/testify/mock"

// PostDataFunctional is an autogenerated mock type for the PostDataFunctional type
type PostDataFunctional struct {
	mock.Mock
}

// Add provides a mock function with given fields: c
func (_m *PostDataFunctional) Add(c *post.Post) (*post.Post, error) {
	ret := _m.Called(c)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(*post.Post) *post.Post); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*post.Post) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddComm provides a mock function with given fields: _a0
func (_m *PostDataFunctional) AddComm(_a0 *post.Post) (*post.Post, error) {
	ret := _m.Called(_a0)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(*post.Post) *post.Post); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*post.Post) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *PostDataFunctional) Delete(id string) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComm provides a mock function with given fields: _a0
func (_m *PostDataFunctional) DeleteComm(_a0 *post.Post) (*post.Post, error) {
	ret := _m.Called(_a0)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(*post.Post) *post.Post); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*post.Post) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *PostDataFunctional) Get(id string) (*post.Post, error) {
	ret := _m.Called(id)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(string) *post.Post); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilter provides a mock function with given fields: ctx, filter
func (_m *PostDataFunctional) GetFilter(ctx context.Context, filter interface{}) ([]*post.Post, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*post.Post
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) []*post.Post); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Len provides a mock function with given fields:
func (_m *PostDataFunctional) Len() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// UpVote provides a mock function with given fields: ans
func (_m *PostDataFunctional) UpVote(ans *post.Post) (*post.Post, error) {
	ret := _m.Called(ans)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(*post.Post) *post.Post); ok {
		r0 = rf(ans)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*post.Post) error); ok {
		r1 = rf(ans)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
